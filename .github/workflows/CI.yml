name: CI

env:
  DEBUG: 'napi:*'
  APP_NAME: 'node-keyring'
  MACOSX_DEPLOYMENT_TARGET: '10.15'
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

on:
  push:
    branches:
      - main
    tags-ignore:
      - '**'
  pull_request:

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: 'x86_64-apple-darwin'
            setup: |
              brew install nasm
            build: |
              rustc --print target-cpus
              yarn build-release
            downloadTarget: ''
          - host: windows-latest
            build: yarn build-release
            target: 'x86_64-pc-windows-msvc'
            downloadTarget: ''
          - host: ubuntu-latest
            target: 'x86_64-unknown-linux-gnu'
            downloadTarget: ''

    name: stable - ${{ matrix.settings.target }} - node@16
    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          check-latest: true
          cache: 'yarn'

      - name: Set env
        if: matrix.settings.host == 'windows-latest'
        run: echo "C:\\msys64\\mingw64\\bin" >> $GITHUB_PATH
        shell: bash

      - name: Setup nasm
        uses: ilammy/setup-nasm@v1
        if: matrix.settings.host == 'windows-latest'

      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          target: ${{ matrix.settings.target }}

      - name: Install arm rust for universal build
        if: matrix.settings.host == 'macos-latest'
        uses: actions-rs/toolchain@v1
        with:
          target: aarch64-apple-darwin

      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ matrix.settings.target }}-cargo-cache

      - name: Cache yarn
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: ${{ matrix.settings.target }}-yarn-cache-node-16

      - name: Install dependencies
        run: yarn install --immutable --mode=skip-build --no-optional

#      - name: Pull latest image
#        run: ${{ matrix.settings.docker }}
#        env:
#          DOCKER_REGISTRY_URL: ghcr.io
#        if: ${{ matrix.settings.docker }}

      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}

#      - name: Download skia binary
#        run: node ./scripts/release-skia-binary.js --download --target=${{ matrix.settings.downloadTarget }}

      - name: 'Build'
        run: ${{ matrix.settings.build }}

      - name: 'Rename index.node'
        run: mv index.node ${{ env.APP_NAME }}.${{ matrix.settings.target }}.node

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2-beta
        with:
          node-version: 16
          check-latest: true
          cache: yarn

      - name: Cache NPM dependencies
        uses: actions/cache@v2
        with:
          path: node_modules
          key: npm-cache-ubuntu-latest-publish-${{ hashFiles('yarn.lock') }}

      - name: 'Install dependencies'
        run: yarn install --ignore-scripts --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: List artifacts
        run: ls -R artifacts
        shell: bash

      - name: 'Move artifacts in place of native npm packages'
        run: |
          mv artifacts/bindings-x86_64-apple-darwin/node-keyring.x86_64-apple-darwin.node npm/darwin-universal/node-keyring.darwin-universal.node
          mv artifacts/bindings-x86_64-pc-windows-msvc/node-keyring.x86_64-pc-windows-msvc.node npm/win32-x64-msvc/node-keyring.win32-x64-msvc.node 
          mv artifacts/bindings-x86_64-unknown-linux-gnu/node-keyring.x86_64-unknown-linux-gnu.node npm/linux-x64-gnu/node-keyring.linux-x64-gnu.node

      - run: git config --global user.name 'Github Actions'
      - run: git config --global user.email 'redmar@creativecode.nl'

      - name: 'Publish native npm packages'
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> ~/.npmrc
          cd npm/darwin-universal
          npm version patch -m "[RELEASE] %s"
          npm publish
          cd ../..
          cd npm/win32-x64-msvc
          npm version patch -m "[RELEASE] %s"
          npm publish
          cd ../..
          cd npm/linux-x64-gnu
          npm version patch -m "[RELEASE] %s"
          npm publish

      - name: Commit native packages versions
        run: |
          git show
          git push